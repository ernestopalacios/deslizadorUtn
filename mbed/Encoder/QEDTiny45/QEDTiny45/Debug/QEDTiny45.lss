
QEDTiny45.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000306  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002b  00800060  00800060  0000037a  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062c  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000227  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e2  00000000  00000000  000013c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  000017a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b7  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012a  00000000  00000000  00001b53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	28 c0       	rjmp	.+80     	; 0x56 <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	c7 c0       	rjmp	.+398    	; 0x1aa <__vector_13>
  1c:	e2 c0       	rjmp	.+452    	; 0x1e2 <__vector_14>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e6 e0       	ldi	r30, 0x06	; 6
  32:	f3 e0       	ldi	r31, 0x03	; 3
  34:	02 c0       	rjmp	.+4      	; 0x3a <__CCP__+0x6>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 36       	cpi	r26, 0x60	; 96
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__CCP__+0x2>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ab 38       	cpi	r26, 0x8B	; 139
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	41 d0       	rcall	.+130    	; 0xd4 <main>
  52:	57 c1       	rjmp	.+686    	; 0x302 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_2>:
 * ARGS:		none
 * RETURN:		none
 *
 *****************************************************************************/
ISR (PCINT0_vect)
{
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	2f 93       	push	r18
  62:	8f 93       	push	r24
  64:	9f 93       	push	r25
  enc_now = (PINB & (3 << 3)) >> 3;                //read the port pins and shift result to bottom bits
  66:	86 b3       	in	r24, 0x16	; 22
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	88 71       	andi	r24, 0x18	; 24
  6c:	90 70       	andi	r25, 0x00	; 0
  6e:	95 95       	asr	r25
  70:	87 95       	ror	r24
  72:	95 95       	asr	r25
  74:	87 95       	ror	r24
  76:	95 95       	asr	r25
  78:	87 95       	ror	r24
  7a:	28 2f       	mov	r18, r24
  7c:	80 93 87 00 	sts	0x0087, r24
  enc_dir = (enc_last & 1) ^ ((enc_now & 2) >> 1); //determine direction of rotation
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	82 70       	andi	r24, 0x02	; 2
  84:	90 70       	andi	r25, 0x00	; 0
  86:	95 95       	asr	r25
  88:	87 95       	ror	r24
  8a:	90 91 60 00 	lds	r25, 0x0060
  8e:	91 70       	andi	r25, 0x01	; 1
  90:	89 27       	eor	r24, r25
  92:	80 93 8a 00 	sts	0x008A, r24
  
  if(enc_dir == 0) 
  96:	88 23       	and	r24, r24
  98:	51 f4       	brne	.+20     	; 0xae <__vector_2+0x58>
  	enc_pos.value++; 
  9a:	80 91 88 00 	lds	r24, 0x0088
  9e:	90 91 89 00 	lds	r25, 0x0089
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	90 93 89 00 	sts	0x0089, r25
  a8:	80 93 88 00 	sts	0x0088, r24
  ac:	09 c0       	rjmp	.+18     	; 0xc0 <__vector_2+0x6a>
 
  	else   

  		enc_pos.value--;        //update encoder position
  ae:	80 91 88 00 	lds	r24, 0x0088
  b2:	90 91 89 00 	lds	r25, 0x0089
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	90 93 89 00 	sts	0x0089, r25
  bc:	80 93 88 00 	sts	0x0088, r24
  
  enc_last = enc_now;     //remember last state
  c0:	20 93 60 00 	sts	0x0060, r18
}
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	2f 91       	pop	r18
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <main>:
 *
 *****************************************************************************/
int main(void)
{
  unsigned char temp;
  enc_pos.value = 0;
  d4:	10 92 89 00 	sts	0x0089, r1
  d8:	10 92 88 00 	sts	0x0088, r1

  PCMSK |= (1 << PCINT3); // tell pin change mask to listen to pin2
  dc:	ab 9a       	sbi	0x15, 3	; 21
  GIMSK |= (1 << PCIE);   // enable PCINT interrupt in the general interrupt mask
  de:	8b b7       	in	r24, 0x3b	; 59
  e0:	80 62       	ori	r24, 0x20	; 32
  e2:	8b bf       	out	0x3b, r24	; 59
  
  sei();
  e4:	78 94       	sei

  cbi(DDRB, DDB3);        // PB3 set up as input
  e6:	bb 98       	cbi	0x17, 3	; 23
  cbi(DDRB, DDB4);        // PB4 set up as input
  e8:	bc 98       	cbi	0x17, 4	; 23
  sbi(PORTB, PB3);	      // Set PB3 internal pullup
  ea:	c3 9a       	sbi	0x18, 3	; 24
  sbi(PORTB, PB4);	      // Set PB4 internal pullup
  ec:	c4 9a       	sbi	0x18, 4	; 24
  //unsigned char slaveAddress = 0x26;
  //unsigned char slaveAddress = 0x2E;	  
  //unsigned char slaveAddress = 0x36;
  unsigned char slaveAddress = 0x3E;

  usiTwiSlaveInit(slaveAddress);
  ee:	8e e3       	ldi	r24, 0x3E	; 62
  f0:	1a d0       	rcall	.+52     	; 0x126 <usiTwiSlaveInit>
	             //Reset the counter
		case 1 : enc_pos.value = 0; 
		         break; 

			     //Send the counter
		case 10: usiTwiTransmitByte(enc_pos.bytes[0]);
  f2:	c8 e8       	ldi	r28, 0x88	; 136
  f4:	d0 e0       	ldi	r29, 0x00	; 0
				 usiTwiTransmitByte(enc_pos.bytes[1]); 
  f6:	8e 01       	movw	r16, r28
  f8:	0f 5f       	subi	r16, 0xFF	; 255
  fa:	1f 4f       	sbci	r17, 0xFF	; 255

  usiTwiSlaveInit(slaveAddress);

  for (;;)
  {
    if (usiTwiDataInReceiveBuffer())
  fc:	4d d0       	rcall	.+154    	; 0x198 <usiTwiDataInReceiveBuffer>
  fe:	88 23       	and	r24, r24
 100:	81 f0       	breq	.+32     	; 0x122 <main+0x4e>
    {
	  temp = usiTwiReceiveByte();
 102:	36 d0       	rcall	.+108    	; 0x170 <usiTwiReceiveByte>
     
	  //which register requested
	  //1..9   Reserved Commands
	  //10..19 Reserved Data
	  switch (temp)
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	19 f0       	breq	.+6      	; 0x10e <main+0x3a>
 108:	8a 30       	cpi	r24, 0x0A	; 10
 10a:	59 f4       	brne	.+22     	; 0x122 <main+0x4e>
 10c:	05 c0       	rjmp	.+10     	; 0x118 <main+0x44>
	  {
	             //Reset the counter
		case 1 : enc_pos.value = 0; 
 10e:	10 92 89 00 	sts	0x0089, r1
 112:	10 92 88 00 	sts	0x0088, r1
		         break; 
 116:	05 c0       	rjmp	.+10     	; 0x122 <main+0x4e>

			     //Send the counter
		case 10: usiTwiTransmitByte(enc_pos.bytes[0]);
 118:	88 81       	ld	r24, Y
 11a:	1a d0       	rcall	.+52     	; 0x150 <usiTwiTransmitByte>
				 usiTwiTransmitByte(enc_pos.bytes[1]); 
 11c:	f8 01       	movw	r30, r16
 11e:	80 81       	ld	r24, Z
 120:	17 d0       	rcall	.+46     	; 0x150 <usiTwiTransmitByte>
		default : //Do nothing
		          break;
	  }	  
    }

	asm volatile ("NOP"::);
 122:	00 00       	nop
  }
 124:	eb cf       	rjmp	.-42     	; 0xfc <main+0x28>

00000126 <usiTwiSlaveInit>:

// flushes the TWI buffers

static void flushTwiBuffers()
{
  rxTail = 0;
 126:	10 92 63 00 	sts	0x0063, r1
  rxHead = 0;
 12a:	10 92 64 00 	sts	0x0064, r1
  txTail = 0;
 12e:	10 92 61 00 	sts	0x0061, r1
  txHead = 0;
 132:	10 92 62 00 	sts	0x0062, r1
void usiTwiSlaveInit(uint8_t ownAddress)
{

  flushTwiBuffers( );

  slaveAddress = ownAddress;
 136:	80 93 66 00 	sts	0x0066, r24
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  // Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
 13a:	87 b3       	in	r24, 0x17	; 23
 13c:	85 60       	ori	r24, 0x05	; 5
 13e:	87 bb       	out	0x17, r24	; 23

  // set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
 140:	c2 9a       	sbi	0x18, 2	; 24

  // set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
 142:	c0 9a       	sbi	0x18, 0	; 24

  // Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 144:	b8 98       	cbi	0x17, 0	; 23

  USICR =
 146:	88 ea       	ldi	r24, 0xA8	; 168
 148:	8d b9       	out	0x0d, r24	; 13
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter

  USISR = ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC );
 14a:	80 ef       	ldi	r24, 0xF0	; 240
 14c:	8e b9       	out	0x0e, r24	; 14

} // end usiTwiSlaveInit
 14e:	08 95       	ret

00000150 <usiTwiTransmitByte>:
{

  uint8_t tmphead;

  // calculate buffer index
  tmphead = ( txHead + 1 ) & TWI_TX_BUFFER_MASK;
 150:	20 91 62 00 	lds	r18, 0x0062
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	2f 70       	andi	r18, 0x0F	; 15

  // wait for free space in buffer
  while ( tmphead == txTail );
 158:	90 91 61 00 	lds	r25, 0x0061
 15c:	29 17       	cp	r18, r25
 15e:	e1 f3       	breq	.-8      	; 0x158 <usiTwiTransmitByte+0x8>

  // store data in buffer
  txBuf[ tmphead ] = data;
 160:	e7 e6       	ldi	r30, 0x67	; 103
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	e2 0f       	add	r30, r18
 166:	f1 1d       	adc	r31, r1
 168:	80 83       	st	Z, r24

  // store new index
  txHead = tmphead;
 16a:	20 93 62 00 	sts	0x0062, r18

} // end usiTwiTransmitByte
 16e:	08 95       	ret

00000170 <usiTwiReceiveByte>:

uint8_t usiTwiReceiveByte()
{

  // wait for Rx data
  while ( rxHead == rxTail );
 170:	90 91 64 00 	lds	r25, 0x0064
 174:	80 91 63 00 	lds	r24, 0x0063
 178:	98 17       	cp	r25, r24
 17a:	d1 f3       	breq	.-12     	; 0x170 <usiTwiReceiveByte>

  // calculate buffer index
  rxTail = ( rxTail + 1 ) & TWI_RX_BUFFER_MASK;
 17c:	80 91 63 00 	lds	r24, 0x0063
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	8f 70       	andi	r24, 0x0F	; 15
 184:	80 93 63 00 	sts	0x0063, r24

  // return data from the buffer.
  return rxBuf[ rxTail ];
 188:	80 91 63 00 	lds	r24, 0x0063
 18c:	e7 e7       	ldi	r30, 0x77	; 119
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	e8 0f       	add	r30, r24
 192:	f1 1d       	adc	r31, r1

} // end usiTwiReceiveByte
 194:	80 81       	ld	r24, Z
 196:	08 95       	ret

00000198 <usiTwiDataInReceiveBuffer>:

bool usiTwiDataInReceiveBuffer()
{

  // return 0 (false) if the receive buffer is empty
  return rxHead != rxTail;
 198:	20 91 64 00 	lds	r18, 0x0064
 19c:	90 91 63 00 	lds	r25, 0x0063
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	29 17       	cp	r18, r25
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <usiTwiDataInReceiveBuffer+0x10>
 1a6:	80 e0       	ldi	r24, 0x00	; 0

} // end usiTwiDataInReceiveBuffer
 1a8:	08 95       	ret

000001aa <__vector_13>:
                            USI Start Condition ISR

********************************************************************************/

ISR(USI_START_VECTOR)
{
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 93       	push	r24
  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
 1b6:	10 92 65 00 	sts	0x0065, r1

  // set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 1ba:	b8 98       	cbi	0x17, 0	; 23
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
 1bc:	b2 9b       	sbis	0x16, 2	; 22
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <__vector_13+0x1a>
       // SCL his high
       ( PIN_USI & ( 1 << PIN_USI_SCL ) ) &&
 1c0:	b0 9b       	sbis	0x16, 0	; 22
 1c2:	fc cf       	rjmp	.-8      	; 0x1bc <__vector_13+0x12>
       // and SDA is low
       !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  );


  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
 1c4:	b0 99       	sbic	0x16, 0	; 22
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <__vector_13+0x24>
  {

    // a Stop Condition did not occur

    USICR =
 1c8:	88 ef       	ldi	r24, 0xF8	; 248
 1ca:	8d b9       	out	0x0d, r24	; 13
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <__vector_13+0x28>
  }
  else
  {

    // a Stop Condition did occur
    USICR =
 1ce:	88 ea       	ldi	r24, 0xA8	; 168
 1d0:	8d b9       	out	0x0d, r24	; 13
         // no toggle clock-port pin
         ( 0 << USITC );

  } // end if

  USISR =
 1d2:	80 ef       	ldi	r24, 0xF0	; 240
 1d4:	8e b9       	out	0x0e, r24	; 14
       ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) |
       ( 1 << USIPF ) |( 1 << USIDC ) |
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);

} // end ISR( USI_START_VECTOR )
 1d6:	8f 91       	pop	r24
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <__vector_14>:
Only disabled when waiting for a new Start Condition.

********************************************************************************/

ISR(USI_OVERFLOW_VECTOR)
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
  switch ( overflowState )
 1f4:	80 91 65 00 	lds	r24, 0x0065
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	09 f4       	brne	.+2      	; 0x1fe <__vector_14+0x1c>
 1fc:	55 c0       	rjmp	.+170    	; 0x2a8 <__vector_14+0xc6>
 1fe:	83 30       	cpi	r24, 0x03	; 3
 200:	30 f4       	brcc	.+12     	; 0x20e <__vector_14+0x2c>
 202:	88 23       	and	r24, r24
 204:	69 f0       	breq	.+26     	; 0x220 <__vector_14+0x3e>
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	09 f0       	breq	.+2      	; 0x20c <__vector_14+0x2a>
 20a:	72 c0       	rjmp	.+228    	; 0x2f0 <__vector_14+0x10e>
 20c:	2d c0       	rjmp	.+90     	; 0x268 <__vector_14+0x86>
 20e:	84 30       	cpi	r24, 0x04	; 4
 210:	09 f4       	brne	.+2      	; 0x214 <__vector_14+0x32>
 212:	52 c0       	rjmp	.+164    	; 0x2b8 <__vector_14+0xd6>
 214:	84 30       	cpi	r24, 0x04	; 4
 216:	00 f1       	brcs	.+64     	; 0x258 <__vector_14+0x76>
 218:	85 30       	cpi	r24, 0x05	; 5
 21a:	09 f0       	breq	.+2      	; 0x21e <__vector_14+0x3c>
 21c:	69 c0       	rjmp	.+210    	; 0x2f0 <__vector_14+0x10e>
 21e:	53 c0       	rjmp	.+166    	; 0x2c6 <__vector_14+0xe4>
  {
    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
 220:	8f b1       	in	r24, 0x0f	; 15
 222:	88 23       	and	r24, r24
 224:	31 f0       	breq	.+12     	; 0x232 <__vector_14+0x50>
 226:	9f b1       	in	r25, 0x0f	; 15
 228:	96 95       	lsr	r25
 22a:	80 91 66 00 	lds	r24, 0x0066
 22e:	98 17       	cp	r25, r24
 230:	71 f4       	brne	.+28     	; 0x24e <__vector_14+0x6c>
      {
		if ( USIDR & 0x01 )
 232:	78 9b       	sbis	0x0f, 0	; 15
 234:	04 c0       	rjmp	.+8      	; 0x23e <__vector_14+0x5c>
        {
          overflowState = USI_SLAVE_SEND_DATA;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 65 00 	sts	0x0065, r24
 23c:	03 c0       	rjmp	.+6      	; 0x244 <__vector_14+0x62>
        }
        else
        {
          overflowState = USI_SLAVE_REQUEST_DATA;
 23e:	84 e0       	ldi	r24, 0x04	; 4
 240:	80 93 65 00 	sts	0x0065, r24
        } // end if
        SET_USI_TO_SEND_ACK( );
 244:	1f b8       	out	0x0f, r1	; 15
 246:	b8 9a       	sbi	0x17, 0	; 23
 248:	8e e7       	ldi	r24, 0x7E	; 126
 24a:	8e b9       	out	0x0e, r24	; 14
 24c:	51 c0       	rjmp	.+162    	; 0x2f0 <__vector_14+0x10e>
      }
      else
      {
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 24e:	88 ea       	ldi	r24, 0xA8	; 168
 250:	8d b9       	out	0x0d, r24	; 13
 252:	80 e7       	ldi	r24, 0x70	; 112
 254:	8e b9       	out	0x0e, r24	; 14
 256:	4c c0       	rjmp	.+152    	; 0x2f0 <__vector_14+0x10e>
      break;

    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
      if ( USIDR )
 258:	8f b1       	in	r24, 0x0f	; 15
 25a:	88 23       	and	r24, r24
 25c:	29 f0       	breq	.+10     	; 0x268 <__vector_14+0x86>
      {
        // if NACK, the master does not want more data
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 25e:	88 ea       	ldi	r24, 0xA8	; 168
 260:	8d b9       	out	0x0d, r24	; 13
 262:	80 e7       	ldi	r24, 0x70	; 112
 264:	8e b9       	out	0x0e, r24	; 14
        return;
 266:	44 c0       	rjmp	.+136    	; 0x2f0 <__vector_14+0x10e>

    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:
      // Get data from Buffer
      if ( txHead != txTail )
 268:	90 91 62 00 	lds	r25, 0x0062
 26c:	80 91 61 00 	lds	r24, 0x0061
 270:	98 17       	cp	r25, r24
 272:	a9 f0       	breq	.+42     	; 0x29e <__vector_14+0xbc>
      {
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
 274:	80 91 61 00 	lds	r24, 0x0061
 278:	8f 5f       	subi	r24, 0xFF	; 255
 27a:	8f 70       	andi	r24, 0x0F	; 15
 27c:	80 93 61 00 	sts	0x0061, r24
        USIDR = txBuf[ txTail ];
 280:	80 91 61 00 	lds	r24, 0x0061
 284:	e7 e6       	ldi	r30, 0x67	; 103
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	e8 0f       	add	r30, r24
 28a:	f1 1d       	adc	r31, r1
 28c:	80 81       	ld	r24, Z
 28e:	8f b9       	out	0x0f, r24	; 15
      {
        // the buffer is empty
        SET_USI_TO_TWI_START_CONDITION_MODE( );
        return;
      } // end if
      overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	80 93 65 00 	sts	0x0065, r24
      SET_USI_TO_SEND_DATA( );
 296:	b8 9a       	sbi	0x17, 0	; 23
 298:	80 e7       	ldi	r24, 0x70	; 112
 29a:	8e b9       	out	0x0e, r24	; 14
      break;
 29c:	29 c0       	rjmp	.+82     	; 0x2f0 <__vector_14+0x10e>
        USIDR = txBuf[ txTail ];
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 29e:	88 ea       	ldi	r24, 0xA8	; 168
 2a0:	8d b9       	out	0x0d, r24	; 13
 2a2:	80 e7       	ldi	r24, 0x70	; 112
 2a4:	8e b9       	out	0x0e, r24	; 14
        return;
 2a6:	24 c0       	rjmp	.+72     	; 0x2f0 <__vector_14+0x10e>
      break;

    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	80 93 65 00 	sts	0x0065, r24
      SET_USI_TO_READ_ACK( );
 2ae:	b8 98       	cbi	0x17, 0	; 23
 2b0:	1f b8       	out	0x0f, r1	; 15
 2b2:	8e e7       	ldi	r24, 0x7E	; 126
 2b4:	8e b9       	out	0x0e, r24	; 14
      break;
 2b6:	1c c0       	rjmp	.+56     	; 0x2f0 <__vector_14+0x10e>

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 2b8:	85 e0       	ldi	r24, 0x05	; 5
 2ba:	80 93 65 00 	sts	0x0065, r24
      SET_USI_TO_READ_DATA( );
 2be:	b8 98       	cbi	0x17, 0	; 23
 2c0:	80 e7       	ldi	r24, 0x70	; 112
 2c2:	8e b9       	out	0x0e, r24	; 14
      break;
 2c4:	15 c0       	rjmp	.+42     	; 0x2f0 <__vector_14+0x10e>
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // Not necessary, but prevents warnings
      rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
 2c6:	80 91 64 00 	lds	r24, 0x0064
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
 2cc:	8f 70       	andi	r24, 0x0F	; 15
 2ce:	80 93 64 00 	sts	0x0064, r24
      rxBuf[ rxHead ] = USIDR;
 2d2:	90 91 64 00 	lds	r25, 0x0064
 2d6:	8f b1       	in	r24, 0x0f	; 15
 2d8:	e7 e7       	ldi	r30, 0x77	; 119
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	e9 0f       	add	r30, r25
 2de:	f1 1d       	adc	r31, r1
 2e0:	80 83       	st	Z, r24
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	80 93 65 00 	sts	0x0065, r24
      SET_USI_TO_SEND_ACK( );
 2e8:	1f b8       	out	0x0f, r1	; 15
 2ea:	b8 9a       	sbi	0x17, 0	; 23
 2ec:	8e e7       	ldi	r24, 0x7E	; 126
 2ee:	8e b9       	out	0x0e, r24	; 14
      break;

  } // end switch

} // end ISR( USI_OVERFLOW_VECTOR )
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
